# scanner_api.py
from fastapi import APIRouter, UploadFile, File
from PIL import Image
import numpy as np

# –ú–∏–Ω–∏–º–∞–ª–µ–Ω OCR ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞–º–µ pytesseract –≤–º–µ—Å—Ç–æ EasyOCR, –∑–∞ –¥–∞ —Å–ø–µ—Å—Ç–∏–º –ø–∞–º–µ—Ç
import pytesseract

router = APIRouter()

# –í—Ä–µ–¥–Ω–∏ –ï-–Ω–æ–º–µ—Ä–∞ –∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
harmful_e_numbers = {
    "E407": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω (–≤—ä–∑–ø–∞–ª–µ–Ω–∏—è, —Ö—Ä–∞–Ω–æ—Å–º–∏–ª–∞—Ç–µ–ª–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏)",
    "E621": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç (–≥–ª–∞–≤–æ–±–æ–ª–∏–µ, –∞–ª–µ—Ä–≥–∏–∏)",
    "E262": "–ù–∞—Ç—Ä–∏–µ–≤ –∞—Ü–µ—Ç–∞—Ç (–¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞)",
    "E300": "–ê—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ (–≤ –≥–æ–ª–µ–º–∏ –¥–æ–∑–∏ –¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞)",
    "E330": "–õ–∏–º–æ–Ω–µ–Ω–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ (—É–≤—Ä–µ–∂–¥–∞ –∑—ä–±–Ω–∏—è –µ–º–∞–π–ª)",
    "E250": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç (—Ä–∏—Å–∫ –æ—Ç —Ä–∞–∫, –≤ –º–µ—Å–æ)",
}

harmful_keywords = {
    "–Ω–∏—Ç—Ä–∏—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞ —Å–µ –≤ –º–µ—Å–∞, —Å–≤—ä—Ä–∑–∞–Ω –µ —Å —Ä–∞–∫",
    "–≥–ª—É—Ç–∞–º–∞—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞ –≥–ª–∞–≤–æ–±–æ–ª–∏–µ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "–∫–∞—Ä–∞–≥–∏–Ω–∞–Ω": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω ‚Äì —Å–≤—ä—Ä–∑–∞–Ω —Å –≤—ä–∑–ø–∞–ª–µ–Ω–∏—è –≤ —á–µ—Ä–≤–∞—Ç–∞",
    "—Ñ–æ—Å—Ñ–∞—Ç": "–§–æ—Å—Ñ–∞—Ç–∏ ‚Äì –º–æ–≥–∞—Ç –¥–∞ –≤–ª–∏—è—è—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞ –±—ä–±—Ä–µ—Ü–∏—Ç–µ",
    "–∫–æ–Ω—Å–µ—Ä–≤–∞–Ω": "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–∏ ‚Äì —á–µ—Å—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç –Ω–∏—Ç—Ä–∞—Ç–∏ –∏–ª–∏ —Å—É–ª—Ñ–∏—Ç–∏",
    "–ª–∞–∫—Ç–æ–∑–∞": "–õ–∞–∫—Ç–æ–∑–∞ ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ —Å—Ç–æ–º–∞—à–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–ø–æ–Ω–æ—Å–∏–º–æ—Å—Ç",
}

food_categories = {
    "–ª—É–∫–∞–Ω–∫–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∞–ª–∞–º": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–Ω–∞–¥–µ–Ω–∏—Ü–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å—É–¥–∂—É–∫": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–ø–∞—Å—Ç–µ—Ç": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∏—Ä–µ–Ω–µ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∞—à–∫–∞–≤–∞–ª": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
}

category_alternatives = {
    "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ": [
        "ü•ó –í–º–µ—Å—Ç–æ –∫–æ–ª–±–∞—Å ‚Äì –ø–µ—á–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ —Å –ø–æ–¥–ø—Ä–∞–≤–∫–∏.",
        "üçõ –õ–µ—â–∞ —è—Ö–Ω–∏—è —Å –º–æ—Ä–∫–æ–≤–∏ –∏ –ø–æ–¥–ø—Ä–∞–≤–∫–∏.",
        "ü•ö –Ø–π—Ü–∞ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏.",
    ],
    "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç": [
        "ü•• –í–µ–≥–∞–Ω —Å–∏—Ä–µ–Ω–µ –æ—Ç –∫–∞—à—É.",
        "üßÑ –¢–æ—Ñ—É —Å –±–∏–ª–∫–∏ ‚Äì –∏–¥–µ–∞–ª–Ω–æ –∑–∞ —Å–∞–ª–∞—Ç–∞.",
    ]
}


@router.post("/scan")
async def scan_image(file: UploadFile = File(...)):
    # –û—Ç–≤–∞—Ä—è–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –∏ resize –∑–∞ –ø–æ-–º–∞–ª–∫–æ –ø–∞–º–µ—Ç
    image = Image.open(file.file).convert("RGB")
    max_size = (1024, 1024)
    image.thumbnail(max_size)

    # OCR —Å pytesseract
    full_text = pytesseract.image_to_string(image, lang="bul")
    full_text_lower = full_text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞
    found_e = {e: desc for e, desc in harmful_e_numbers.items() if e.lower() in full_text_lower}
    found_keywords = {word: desc for word, desc in harmful_keywords.items() if word in full_text_lower}

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    product_category = None
    for keyword, category in food_categories.items():
        if keyword in full_text_lower:
            product_category = category
            break

    # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
    alternatives = []
    if (found_e or found_keywords) and product_category:
        alternatives = category_alternatives.get(product_category, [])

    # –û—Ç—á–µ—Ç
    report_lines = []
    if found_e:
        report_lines.append("üß™ –í—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞:")
        for e, desc in found_e.items():
            report_lines.append(f"{e} - {desc}")
    else:
        report_lines.append("‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ E-–Ω–æ–º–µ—Ä–∞.")

    if found_keywords:
        report_lines.append("üß¨ –ó–∞—Å–µ—á–µ–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏:")
        for w, desc in found_keywords.items():
            report_lines.append(f"{w} ‚Äì {desc}")
    else:
        report_lines.append("‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –æ–ø–∞—Å–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞.")

    if alternatives:
        report_lines.append(f"üçΩ –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ –Ω–∞ {product_category}:")
        report_lines.extend(alternatives)

    report_text = "üìÑ OCR –æ—Ç—á–µ—Ç –∑–∞ –µ—Ç–∏–∫–µ—Ç–∞:\n\n"
    report_text += "–†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:\n" + full_text + "\n\n"
    report_text += "\n".join(report_lines)

    return {
        "full_text": full_text,
        "found_e_numbers": found_e,
        "found_keywords": found_keywords,
        "product_category": product_category,
        "alternatives": alternatives,
        "report": report_text
    }
