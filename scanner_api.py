from fastapi import APIRouter, Query
import easyocr
import numpy as np
from PIL import Image
import os

router = APIRouter()

BASE_TEST_DIR = os.path.join("test")

# --- –æ—Å—Ç–∞–≤–∞—Ç harmful_e_numbers, harmful_keywords, food_categories –∏ category_alternatives ---
# (–Ω–µ –ø—Ä–æ–º–µ–Ω—è–Ω–∏)

@router.get("/list-test-files")
async def list_test_files():
    if not os.path.exists(BASE_TEST_DIR):
        return {"files": []}
    files = [f for f in os.listdir(BASE_TEST_DIR) if f.lower().endswith((".png", ".jpg", ".jpeg"))]
    return {"files": files}

@router.get("/scan-from-test")
async def scan_from_test(filename: str = Query(..., description="–ò–º–µ—Ç–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")):
    file_path = os.path.join(BASE_TEST_DIR, filename)

    if not os.path.exists(file_path):
        return {"error": f"–§–∞–π–ª—ä—Ç {filename} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞."}

    image = Image.open(file_path).convert("RGB")
    image_np = np.array(image)

    reader = easyocr.Reader(['bg', 'en'])
    results = reader.readtext(image_np)

    full_text = " ".join([text for _, text, _ in results])
    full_text_lower = full_text.lower()

    found_e = {e: desc for e, desc in harmful_e_numbers.items() if e.lower() in full_text_lower}
    found_keywords = {word: reason for word, reason in harmful_keywords.items() if word in full_text_lower}

    product_category = None
    for keyword, category in food_categories.items():
        if keyword in full_text_lower:
            product_category = category
            break

    alternatives = []
    if (found_e or found_keywords) and product_category:
        alternatives = category_alternatives.get(product_category, [])

    report_lines = []
    if found_e:
        report_lines.append("üß™ –í—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞:")
        for e, desc in found_e.items():
            report_lines.append(f"{e} - {desc}")
    else:
        report_lines.append("‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ E-–Ω–æ–º–µ—Ä–∞.")

    if found_keywords:
        report_lines.append("üß¨ –ó–∞—Å–µ—á–µ–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏:")
        for w, reason in found_keywords.items():
            report_lines.append(f"{w} ‚Äì {reason}")
    else:
        report_lines.append("‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –æ–ø–∞—Å–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞.")

    if alternatives:
        report_lines.append(f"üçΩ –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ –Ω–∞ {product_category}:")
        report_lines.extend(alternatives)

    report_text = "üìÑ OCR –æ—Ç—á–µ—Ç –∑–∞ –µ—Ç–∏–∫–µ—Ç–∞:\n\n"
    report_text += "–†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:\n" + full_text + "\n\n"
    report_text += "\n".join(report_lines)

    return {
        "full_text": full_text,
        "found_e_numbers": found_e,
        "found_keywords": found_keywords,
        "product_category": product_category,
        "alternatives": alternatives,
        "report": report_text
    }
