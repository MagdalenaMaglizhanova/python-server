from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import pytesseract
import io
import os
import re

app = Flask(__name__)
CORS(app)

# Tesseract –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# –ù–∞ Render Tesseract –µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏ —Å–µ –Ω–∞–º–∏—Ä–∞ –≤ PATH
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

# --- –í—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞, –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ ---
# (—Ç—É–∫ –ø–æ—Å—Ç–∞–≤—è—à —Å—ä—â–∏—Ç–µ dict-–æ–≤–µ: harmful_e_numbers, harmful_keywords,
# food_categories, category_alternatives –∫–∞–∫—Ç–æ –≤ —Ç–≤–æ—è –∫–æ–¥)
# ... 

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞ OCR –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç
def extract_text_from_image(image_data):
    try:
        image = Image.open(io.BytesIO(image_data))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        text = pytesseract.image_to_string(image, lang='bul+eng')
        return text.strip()
    except Exception as e:
        return f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞: {str(e)}"

def analyze_text(text):
    text_lower = text.lower()
    found_e_numbers = []
    for e_num, desc in harmful_e_numbers.items():
        pattern = re.compile(r'\b' + re.escape(e_num) + r'\b', re.IGNORECASE)
        if pattern.search(text):
            found_e_numbers.append({'code': e_num, 'description': desc})
    found_keywords = []
    for keyword, desc in harmful_keywords.items():
        if keyword.lower() in text_lower:
            found_keywords.append({'keyword': keyword, 'description': desc})
    product_category = None
    for keyword, category in food_categories.items():
        if keyword in text_lower:
            product_category = category
            break
    return found_e_numbers, found_keywords, product_category

def generate_report(ocr_text, e_numbers, keywords, category, alternatives):
    lines = ["üìÑ OCR –ê–ù–ê–õ–ò–ó –ù–ê –•–†–ê–ù–ò–¢–ï–õ–ï–ù –ï–¢–ò–ö–ï–¢", "="*50]
    lines.append("\nüìñ –†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:")
    lines.append(ocr_text if ocr_text else "–ù–µ –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç")
    lines.append("\n" + "="*50)
    if e_numbers:
        lines.append("\nüö® –í–†–ï–î–ù–ò E-–ù–û–ú–ï–†–ê:")
        for item in e_numbers:
            lines.append(f"‚Ä¢ {item['code']}: {item['description']}")
    else:
        lines.append("\n‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞")
    if keywords:
        lines.append("\n‚ö†Ô∏è –ó–ê–°–ï–ß–ï–ù–ò –°–™–°–¢–ê–í–ö–ò:")
        for item in keywords:
            lines.append(f"‚Ä¢ {item['keyword']}: {item['description']}")
    else:
        lines.append("\n‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –æ–ø–∞—Å–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏")
    if category:
        lines.append(f"\nüè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–Ø –ù–ê –ü–†–û–î–£–ö–¢–ê: {category}")
    if alternatives:
        lines.append("\nüçΩ –ü–†–ï–ü–û–†–™–ß–ê–ù–ò –ê–õ–¢–ï–†–ù–ê–¢–ò–í–ò:")
        for alt in alternatives:
            lines.append(f"‚Ä¢ {alt}")
    return "\n".join(lines)

# --- Flask Endpoints ---
@app.route('/api/scan', methods=['POST'])
def scan_image():
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–ù—è–º–∞ –∫–∞—á–µ–Ω —Ñ–∞–π–ª'}), 400
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª'}), 400
        if not file.content_type.startswith('image/'):
            return jsonify({'error': '–§–∞–π–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG, PNG)'}), 400
        image_data = file.read()
        ocr_text = extract_text_from_image(image_data)
        if ocr_text.startswith("–ì—Ä–µ—à–∫–∞"):
            return jsonify({'error': ocr_text}), 500
        e_numbers, keywords, category = analyze_text(ocr_text)
        alternatives = category_alternatives.get(category, []) if (e_numbers or keywords) and category else []
        report = generate_report(ocr_text, e_numbers, keywords, category, alternatives)
        return jsonify({
            'success': True,
            'ocr_text': ocr_text,
            'harmful_e_numbers': e_numbers,
            'harmful_keywords': keywords,
            'product_category': category,
            'alternatives': alternatives,
            'report': report
        })
    except Exception as e:
        return jsonify({'error': f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {str(e)}'}), 500

@app.route('/api/analyze-text', methods=['POST'])
def analyze_text_endpoint():
    try:
        data = request.get_json()
        if not data or 'text' not in data:
            return jsonify({'error': '–ù—è–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω —Ç–µ–∫—Å—Ç'}), 400
        text = data['text']
        if not text.strip():
            return jsonify({'error': '–¢–µ–∫—Å—Ç—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω'}), 400
        e_numbers, keywords, category = analyze_text(text)
        alternatives = category_alternatives.get(category, []) if (e_numbers or keywords) and category else []
        report = generate_report(text, e_numbers, keywords, category, alternatives)
        return jsonify({
            'success': True,
            'harmful_e_numbers': e_numbers,
            'harmful_keywords': keywords,
            'product_category': category,
            'alternatives': alternatives,
            'report': report
        })
    except Exception as e:
        return jsonify({'error': f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'OK', 'message': 'OCR API —Ä–∞–±–æ—Ç–∏ —É—Å–ø–µ—à–Ω–æ', 'version': '1.0.0'})

@app.route('/')
def home():
    return jsonify({
        'message': 'OCR API –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –µ—Ç–∏–∫–µ—Ç–∏',
        'endpoints': {
            'POST /api/scan': '–°–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'POST /api/analyze-text': '–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç',
            'GET /api/health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ'
        }
    })

# --- –õ–æ–∫–∞–ª–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ ---
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
