# main.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import io
import base64
import requests
import os

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GOOGLE_VISION_API_URL = "https://vision.googleapis.com/v1/images:annotate"
API_KEY = os.environ.get('GOOGLE_VISION_API_KEY')  # –©–µ —Å–µ—Ç–Ω–µ—à –≤ Render dashboard

# –ë–∞–∑–∞ –¥–∞–Ω–Ω–∏ —Å—ä—Å —Å—ä—Å—Ç–∞–≤–∫–∏ (–ª–æ–∫–∞–ª–Ω–∞ - –Ω—è–º–∞ –Ω—É–∂–¥–∞ –æ—Ç –≥–æ–ª–µ–º–∏ –º–æ–¥–µ–ª–∏)
harmful_e_numbers = {
    "E102", "E104", "E110", "E120", "E122", "E123", "E124", "E127", "E128", 
    "E129", "E131", "E132", "E133", "E142", "E151", "E154", "E155", "E180",
    "E210", "E211", "E212", "E213", "E214", "E215", "E216", "E217", "E218", 
    "E219", "E220", "E221", "E222", "E223", "E224", "E226", "E227", "E228",
    "E230", "E231", "E232", "E233", "E239", "E249", "E250", "E251", "E252",
    "E407", "E621", "E262", "E300", "E330", "E250"
}

harmful_keywords = {
    "–Ω–∏—Ç—Ä–∏—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞ —Å–µ –≤ –º–µ—Å–∞, —Å–≤—ä—Ä–∑–∞–Ω –µ —Å —Ä–∞–∫",
    "–≥–ª—É—Ç–∞–º–∞—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞ –≥–ª–∞–≤–æ–±–æ–ª–∏–µ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "–∫–∞—Ä–∞–≥–∏–Ω–∞–Ω": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω ‚Äì —Å–≤—ä—Ä–∑–∞–Ω —Å –≤—ä–∑–ø–∞–ª–µ–Ω–∏—è –≤ —á–µ—Ä–≤–∞—Ç–∞",
    "—Ñ–æ—Å—Ñ–∞—Ç": "–§–æ—Å—Ñ–∞—Ç–∏ ‚Äì –º–æ–≥–∞—Ç –¥–∞ –≤–ª–∏—è—è—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞ –±—ä–±—Ä–µ—Ü–∏—Ç–µ",
    "–∫–æ–Ω—Å–µ—Ä–≤–∞–Ω": "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–∏ ‚Äì —á–µ—Å—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç –Ω–∏—Ç—Ä–∞—Ç–∏ –∏–ª–∏ —Å—É–ª—Ñ–∏—Ç–∏",
    "–∞—Å–ø–∞—Ä—Ç–∞–º": "–ò–∑–∫—É—Å—Ç–≤–µ–Ω –ø–æ–¥—Å–ª–∞–¥–∏—Ç–µ–ª - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–æ –≤—Ä–µ–¥–µ–Ω",
    "—Å–∞—Ö–∞—Ä–∏–Ω": "–ò–∑–∫—É—Å—Ç–≤–µ–Ω –ø–æ–¥—Å–ª–∞–¥–∏—Ç–µ–ª",
    "–±–µ–Ω–∑–æ–∞—Ç": "–ë–µ–Ω–∑–æ–∞—Ç –Ω–∞—Ç—Ä–∏—è - –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ –∞–ª–µ—Ä–≥–∏–∏",
}

food_categories = {
    "–ª—É–∫–∞–Ω–∫–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∞–ª–∞–º": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ", 
    "–Ω–∞–¥–µ–Ω–∏—Ü–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å—É–¥–∂—É–∫": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–ø–∞—Å—Ç–µ—Ç": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∏—Ä–µ–Ω–µ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∞—à–∫–∞–≤–∞–ª": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∏—Å–µ–ª–æ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–º–ª—è–∫–æ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
}

category_alternatives = {
    "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ": [
        "ü•ó –ü–µ—á–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ —Å –ø–æ–¥–ø—Ä–∞–≤–∫–∏",
        "üçõ –õ–µ—â–∞ —è—Ö–Ω–∏—è —Å –º–æ—Ä–∫–æ–≤–∏",
        "ü•ö –Ø–π—Ü–∞ —Å –∞–≤–æ–∫–∞–¥–æ",
        "üçó –ü—É—à–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ",
        "üêü –ü–µ—á–µ–Ω —Å—å–æ–º–≥–∞"
    ],
    "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç": [
        "ü•• –í–µ–≥–∞–Ω —Å–∏—Ä–µ–Ω–µ –æ—Ç –∫–∞—à—É",
        "üßÑ –¢–æ—Ñ—É —Å –±–∏–ª–∫–∏",
        "ü•ë –ê–≤–æ–∫–∞–¥–æ –∑–∞ —Å–æ—Å–æ–≤–µ",
        "üå∞ –ë–∞–¥–µ–º–æ–≤–æ –º–ª—è–∫–æ"
    ]
}

def google_vision_ocr(image_data):
    """–ò–∑–ø–æ–ª–∑–≤–∞ Google Vision API –∑–∞ OCR"""
    if not API_KEY:
        return {"error": "Google Vision API key –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"}
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –¥–æ base64
    image_content = base64.b64encode(image_data).decode('utf-8')
    
    payload = {
        "requests": [
            {
                "image": {"content": image_content},
                "features": [{"type": "TEXT_DETECTION"}]
            }
        ]
    }
    
    try:
        response = requests.post(
            f"{GOOGLE_VISION_API_URL}?key={API_KEY}",
            json=payload,
            timeout=30
        )
        response.raise_for_status()
        
        result = response.json()
        if 'responses' in result and result['responses']:
            text_annotations = result['responses'][0].get('textAnnotations', [])
            if text_annotations:
                return text_annotations[0].get('description', '')
        
        return ""
    except Exception as e:
        return {"error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OCR: {str(e)}"}

def simple_text_analysis(text):
    """–õ–æ–∫–∞–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –≤—ä–Ω—à–Ω–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)"""
    text_lower = text.lower()
    
    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ E-–Ω–æ–º–µ—Ä–∞
    found_e_numbers = []
    for e_num in harmful_e_numbers:
        if e_num.lower() in text_lower:
            found_e_numbers.append(e_num)
    
    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    found_keywords = []
    for keyword, description in harmful_keywords.items():
        if keyword in text_lower:
            found_keywords.append({"keyword": keyword, "description": description})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    product_category = None
    for keyword, category in food_categories.items():
        if keyword in text_lower:
            product_category = category
            break
    
    return found_e_numbers, found_keywords, product_category

@app.route('/api/scan', methods=['POST'])
def scan_image():
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–ù—è–º–∞ –∫–∞—á–µ–Ω —Ñ–∞–π–ª'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª'}), 400

        # –ü—Ä–æ—á–∏—Ç–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞
        image_data = file.read()
        
        # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
        ocr_result = google_vision_ocr(image_data)
        
        if isinstance(ocr_result, dict) and 'error' in ocr_result:
            # Fallback: –æ–ø–∏—Ç–∞–π —Å Tesseract –∞–∫–æ Google Vision –Ω–µ —Ä–∞–±–æ—Ç–∏
            return jsonify({'error': ocr_result['error']}), 500
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
        found_e_numbers, found_keywords, product_category = simple_text_analysis(ocr_result)
        
        # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
        alternatives = []
        if (found_e_numbers or found_keywords) and product_category:
            alternatives = category_alternatives.get(product_category, [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
        report = generate_report(ocr_result, found_e_numbers, found_keywords, alternatives)
        
        result = {
            'success': True,
            'ocr_text': ocr_result,
            'harmful_e_numbers': found_e_numbers,
            'harmful_keywords': found_keywords,
            'product_category': product_category,
            'alternatives': alternatives,
            'report': report
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {str(e)}'}), 500

@app.route('/api/scan-fallback', methods=['POST'])
def scan_fallback():
    """–ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω endpoint –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –±–µ–∑ OCR"""
    text = request.json.get('text', '')
    
    if not text:
        return jsonify({'error': '–ù—è–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω —Ç–µ–∫—Å—Ç'}), 400
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
    found_e_numbers, found_keywords, product_category = simple_text_analysis(text)
    
    # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
    alternatives = []
    if (found_e_numbers or found_keywords) and product_category:
        alternatives = category_alternatives.get(product_category, [])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
    report = generate_report(text, found_e_numbers, found_keywords, alternatives)
    
    result = {
        'success': True,
        'ocr_text': text,
        'harmful_e_numbers': found_e_numbers,
        'harmful_keywords': found_keywords,
        'product_category': product_category,
        'alternatives': alternatives,
        'report': report
    }
    
    return jsonify(result)

def generate_report(text, e_numbers, keywords, alternatives):
    report_lines = []
    report_lines.append("üìÑ –ê–ù–ê–õ–ò–ó –ù–ê –•–†–ê–ù–ò–¢–ï–õ–ï–ù –ï–¢–ò–ö–ï–¢\n")
    report_lines.append("=" * 50)
    report_lines.append("\n–†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:")
    report_lines.append(text)
    report_lines.append("\n" + "=" * 50)
    
    if e_numbers:
        report_lines.append("\nüö® –í–†–ï–î–ù–ò E-–ù–û–ú–ï–†–ê:")
        for e_num in e_numbers:
            report_lines.append(f"‚Ä¢ {e_num}")
    else:
        report_lines.append("\n‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞")
    
    if keywords:
        report_lines.append("\n‚ö†Ô∏è –ó–ê–°–ï–ß–ï–ù–ò –°–™–°–¢–ê–í–ö–ò:")
        for kw in keywords:
            report_lines.append(f"‚Ä¢ {kw['keyword']}: {kw['description']}")
    else:
        report_lines.append("\n‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –æ–ø–∞—Å–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏")
    
    if alternatives:
        report_lines.append("\nüçΩ –ü–†–ï–ü–û–†–™–ß–ê–ù–ò –ê–õ–¢–ï–†–ù–ê–¢–ò–í–ò:")
        for alt in alternatives:
            report_lines.append(f"‚Ä¢ {alt}")
    
    return "\n".join(report_lines)

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'OK', 
        'message': 'API —Ä–∞–±–æ—Ç–∏ —É—Å–ø–µ—à–Ω–æ',
        'ocr_available': bool(API_KEY)
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
