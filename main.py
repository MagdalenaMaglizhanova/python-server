from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import pytesseract
import io
import os
import re

app = Flask(__name__)
CORS(app)

# Tesseract –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ Render
# –ù–∞ Render Tesseract –µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

# –í—Ä–µ–¥–Ω–∏ –ï-–Ω–æ–º–µ—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è
harmful_e_numbers = {
    "E102": "–¢–∞—Ä—Ç—Ä–∞–∑–∏–Ω - –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ –∞–ª–µ—Ä–≥–∏–∏",
    "E104": "–ñ—ä–ª—Ç —Ö–∏–Ω–æ–ª–∏–Ω - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–æ –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E110": "–ñ—ä–ª—Ç –∑–∞–ª–µ–∑ - –∞–ª–µ—Ä–≥–∏—á–µ–Ω —Ä–µ–∞–∫—Ü–∏–∏",
    "E120": "–ö–æ—à–µ–Ω—ñ–ª - –∞–ª–µ—Ä–≥–∏—á–µ–Ω —Ä–µ–∞–∫—Ü–∏–∏", 
    "E122": "–ê–∑–æ—Ä—É–±–∏–Ω - –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ —Ö–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç",
    "E123": "–ê–º–∞—Ä–∞–Ω—Ç - –∑–∞–±—Ä–∞–Ω–µ–Ω –≤ –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏",
    "E124": "–ü–æ–Ω—Å–æ 4R - –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ –∞—Å—Ç–º–∞",
    "E127": "–ï—Ä–∏—Ç—Ä–æ–∑–∏–Ω - –≤–ª–∏—è–µ –Ω–∞ —â–∏—Ç–æ–≤–∏–¥–Ω–∞—Ç–∞ –∂–ª–µ–∑–∞",
    "E129": "–ß–µ—Ä–≤–µ–Ω –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª–µ–Ω - —Ö–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç",
    "E131": "–°–∏–Ω—è –ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–∞ - –æ—Ç–æ–∫ –Ω–∞ –∫–æ–∂–∞—Ç–∞",
    "E132": "–ò–Ω–¥–∏–≥–æ—Ç–∏–Ω - –ø–æ–≤—Ä—ä—â–∞–Ω–µ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "E142": "–ó–µ–ª–µ–Ω–∞ S - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E150": "–ö–∞—Ä–∞–º–µ–ª - –º–æ–∂–µ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–∏",
    "E151": "–ë—Ä–∏–ª—è–Ω—Ç–Ω–∞ —á–µ—Ä–Ω–∞ - –∞–ª–µ—Ä–≥–∏–∏",
    "E154": "–ö–∞—Ñ—è–≤ - –Ω–∞—Ç—Ä–∞–ø–≤–∞—â —Å–µ –≤ —á–µ—Ä–Ω–∏—è –¥—Ä–æ–±",
    "E155": "–ö–∞—Ñ—è–≤ - –∞–ª–µ—Ä–≥–∏—á–µ–Ω —Ä–µ–∞–∫—Ü–∏–∏",
    "E180": "–õ–∏—Ç–æ–ª —Ä—É–±–∏–Ω - —Å—Ç–æ–º–∞—à–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E210": "–ë–µ–Ω–∑–æ–µ–Ω–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ - –∞–ª–µ—Ä–≥–∏–∏",
    "E211": "–ù–∞—Ç—Ä–∏–µ–≤ –±–µ–Ω–∑–æ–∞—Ç - –º–æ–∂–µ –¥–∞ –æ–±—Ä–∞–∑—É–≤–∞ –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–∏",
    "E212": "–ö–∞–ª–∏–µ–≤ –±–µ–Ω–∑–æ–∞—Ç - —Å—Ç–æ–º–∞—à–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E213": "–ö–∞–ª—Ü–∏–µ–≤ –±–µ–Ω–∑–æ–∞—Ç - –∞–ª–µ—Ä–≥–∏–∏",
    "E214": "–ï—Ç–∏–ª–æ–≤ –µ—Å—Ç–µ—Ä - –∑–∞–±—Ä–∞–Ω–µ–Ω –≤ –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏",
    "E215": "–ù–∞—Ç—Ä–∏–µ–≤ –µ—Ç–∏–ª–æ–≤ –µ—Å—Ç–µ—Ä - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E216": "–ü—Ä–æ–ø–∏–ª–æ–≤ –µ—Å—Ç–µ—Ä - –∑–∞–±—Ä–∞–Ω–µ–Ω",
    "E217": "–ù–∞—Ç—Ä–∏–µ–≤ –ø—Ä–æ–ø–∏–ª –µ—Å—Ç–µ—Ä - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E218": "–ú–µ—Ç–∏–ª–æ–≤ –µ—Å—Ç–µ—Ä - –∞–ª–µ—Ä–≥–∏–∏",
    "E219": "–ù–∞—Ç—Ä–∏–µ–≤ –º–µ—Ç–∏–ª–æ–≤ –µ—Å—Ç–µ—Ä - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E220": "–°–µ—Ä–µ–Ω –¥–∏–æ–∫—Å–∏–¥ - –∞—Å—Ç–º–∞ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "E221": "–ù–∞—Ç—Ä–∏–µ–≤ —Å—É–ª—Ñ–∏—Ç - —Å—Ç–æ–º–∞—à–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E222": "–ù–∞—Ç—Ä–∏–µ–≤ —Ö–∏–¥—Ä–æ—Å—É–ª—Ñ–∏—Ç - –∞–ª–µ—Ä–≥–∏–∏",
    "E223": "–ù–∞—Ç—Ä–∏–µ–≤ –º–µ—Ç–∞—Å—É–ª—Ñ–∏—Ç - —Ä–∞–∑—Ä—É—à–∞–≤–∞ –≤–∏—Ç–∞–º–∏–Ω B1",
    "E224": "–ö–∞–ª–∏–µ–≤ –º–µ—Ç–∞—Å—É–ª—Ñ–∏—Ç - —Å—Ç–æ–º–∞—à–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E226": "–ö–∞–ª—Ü–∏–µ–≤ —Å—É–ª—Ñ–∏—Ç - –∑–∞–±—Ä–∞–Ω–µ–Ω –≤ –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏",
    "E227": "–ö–∞–ª—Ü–∏–µ–≤ —Ö–∏–¥—Ä–æ—Å—É–ª—Ñ–∏—Ç - –∞–ª–µ—Ä–≥–∏–∏",
    "E228": "–ö–∞–ª–∏–µ–≤ —Ö–∏–¥—Ä–æ—Å—É–ª—Ñ–∏—Ç - –∞—Å—Ç–º–∞",
    "E230": "–î–∏—Ñ–µ–Ω–∏–ª - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E231": "–û—Ä—Ç–æ—Ñ–µ–Ω–∏–ª—Ñ–µ–Ω–æ–ª - –∫–æ–∂–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E232": "–ù–∞—Ç—Ä–∏–µ–≤ –æ—Ä—Ç–æ—Ñ–µ–Ω–∏–ª—Ñ–µ–Ω–æ–ª - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E233": "–¢–∏–∞–±–µ–Ω–¥–∞–∑–æ–ª - —Ç–æ–∫—Å–∏—á–µ–Ω",
    "E239": "–•–µ–∫—Å–∞–º–µ—Ç–∏–ª–µ–Ω—Ç–µ—Ç—Ä–∞–º–∏–Ω - –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "E249": "–ö–∞–ª–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç - –æ–±—Ä–∞–∑—É–≤–∞ –Ω–∏—Ç—Ä–æ–∑–∞–º–∏–Ω–∏",
    "E250": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç - —Ä–∏—Å–∫ –æ—Ç —Ä–∞–∫",
    "E251": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∞—Ç - –æ–±—Ä–∞–∑—É–≤–∞ –Ω–∏—Ç—Ä–æ–∑–∞–º–∏–Ω–∏", 
    "E252": "–ö–∞–ª–∏–µ–≤ –Ω–∏—Ç—Ä–∞—Ç - —Ä–∏—Å–∫ –æ—Ç —Ä–∞–∫",
    "E407": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω - –≤—ä–∑–ø–∞–ª–µ–Ω–∏—è, —Ö—Ä–∞–Ω–æ—Å–º–∏–ª–∞—Ç–µ–ª–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏",
    "E621": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç - –≥–ª–∞–≤–æ–±–æ–ª–∏–µ, –∞–ª–µ—Ä–≥–∏–∏",
    "E262": "–ù–∞—Ç—Ä–∏–µ–≤ –∞—Ü–µ—Ç–∞—Ç - –¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞",
    "E300": "–ê—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ - –≤ –≥–æ–ª–µ–º–∏ –¥–æ–∑–∏ –¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞",
    "E330": "–õ–∏–º–æ–Ω–µ–Ω–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ - —É–≤—Ä–µ–∂–¥–∞ –∑—ä–±–Ω–∏—è –µ–º–∞–π–ª"
}

harmful_keywords = {
    "–Ω–∏—Ç—Ä–∏—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞ —Å–µ –≤ –º–µ—Å–∞, —Å–≤—ä—Ä–∑–∞–Ω –µ —Å —Ä–∞–∫",
    "–≥–ª—É—Ç–∞–º–∞—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞ –≥–ª–∞–≤–æ–±–æ–ª–∏–µ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "–∫–∞—Ä–∞–≥–∏–Ω–∞–Ω": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω ‚Äì —Å–≤—ä—Ä–∑–∞–Ω —Å –≤—ä–∑–ø–∞–ª–µ–Ω–∏—è –≤ —á–µ—Ä–≤–∞—Ç–∞", 
    "—Ñ–æ—Å—Ñ–∞—Ç": "–§–æ—Å—Ñ–∞—Ç–∏ ‚Äì –º–æ–≥–∞—Ç –¥–∞ –≤–ª–∏—è—è—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞ –±—ä–±—Ä–µ—Ü–∏—Ç–µ",
    "–∫–æ–Ω—Å–µ—Ä–≤–∞–Ω": "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–∏ ‚Äì —á–µ—Å—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç –Ω–∏—Ç—Ä–∞—Ç–∏ –∏–ª–∏ —Å—É–ª—Ñ–∏—Ç–∏",
    "–∞—Å–ø–∞—Ä—Ç–∞–º": "–ò–∑–∫—É—Å—Ç–≤–µ–Ω –ø–æ–¥—Å–ª–∞–¥–∏—Ç–µ–ª - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–æ –≤—Ä–µ–¥–µ–Ω",
    "—Å–∞—Ö–∞—Ä–∏–Ω": "–ò–∑–∫—É—Å—Ç–≤–µ–Ω –ø–æ–¥—Å–ª–∞–¥–∏—Ç–µ–ª - –º–æ–∂–µ –¥–∞ –µ –∫–∞–Ω—Ü–µ—Ä–æ–≥–µ–Ω–µ–Ω",
    "–±–µ–Ω–∑–æ–∞—Ç": "–ë–µ–Ω–∑–æ–∞—Ç –Ω–∞—Ç—Ä–∏—è - –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ –∞–ª–µ—Ä–≥–∏–∏",
    "—Å—É–ª—Ñ–∏—Ç": "–°—É–ª—Ñ–∏—Ç–∏ - –∞—Å—Ç–º–∞ –∏ –∞–ª–µ—Ä–≥–∏—á–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏",
    "—Ç–∞—Ä—Ç—Ä–∞–∑–∏–Ω": "–¢–∞—Ä—Ç—Ä–∞–∑–∏–Ω - —Ö–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –ø—Ä–∏ –¥–µ—Ü–∞",
    "—Ç—Ä–∞–Ω—Å": "–¢—Ä–∞–Ω—Å –º–∞–∑–Ω–∏–Ω–∏ - –ø–æ–≤–∏—à–∞–≤–∞—Ç —Ö–æ–ª–µ—Å—Ç–µ—Ä–æ–ª–∞",
    "–≥–ª—É—Ç–µ–Ω": "–ì–ª—É—Ç–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∏ –ø—Ä–∏ –Ω–µ–ø–æ–Ω–æ—Å–∏–º–æ—Å—Ç",
    "–ª–∞–∫—Ç–æ–∑–∞": "–õ–∞–∫—Ç–æ–∑–∞ - —Å—Ç–æ–º–∞—à–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–ø–æ–Ω–æ—Å–∏–º–æ—Å—Ç",
    "–æ–ª–µ—Å—Ç—Ä–∞": "–û–ª–µ—Å—Ç—Ä–∞ - –Ω–∞–º–∞–ª—è–≤–∞ –∞–±—Å–æ—Ä–±—Ü–∏—è—Ç–∞ –Ω–∞ –≤–∏—Ç–∞–º–∏–Ω–∏"
}

food_categories = {
    "–ª—É–∫–∞–Ω–∫–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∞–ª–∞–º": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–Ω–∞–¥–µ–Ω–∏—Ü–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ", 
    "—Å—É–¥–∂—É–∫": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–ø–∞—Å—Ç–µ—Ç": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∏—Ä–µ–Ω–µ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∞—à–∫–∞–≤–∞–ª": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∏—Å–µ–ª–æ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–º–ª—è–∫–æ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–π–æ–≥—É—Ä—Ç": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∞—à–∫–∞–≤–∞–ª": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "—à–æ–∫–æ–ª–∞–¥": "—Å–ª–∞–¥–∫–∏—à–∏",
    "–±–∏—Å–∫–≤–∏—Ç–∞": "—Å–ª–∞–¥–∫–∏—à–∏",
    "–±–æ–Ω–±–æ–Ω–∏": "—Å–ª–∞–¥–∫–∏—à–∏",
    "–≤–∞—Ñ–ª–∞": "—Å–ª–∞–¥–∫–∏—à–∏",
    "—Å–æ–∫": "–Ω–∞–ø–∏—Ç–∫–∏",
    "–ª–∏–º–æ–Ω–∞–¥–∞": "–Ω–∞–ø–∏—Ç–∫–∏",
    "–∫–æ–∫–∞-–∫–æ–ª–∞": "–Ω–∞–ø–∏—Ç–∫–∏"
}

category_alternatives = {
    "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ": [
        "ü•ó –ü–µ—á–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ —Å –ø–æ–¥–ø—Ä–∞–≤–∫–∏",
        "üçõ –õ–µ—â–∞ —è—Ö–Ω–∏—è —Å –º–æ—Ä–∫–æ–≤–∏ –∏ –ø–æ–¥–ø—Ä–∞–≤–∫–∏", 
        "ü•ö –Ø–π—Ü–∞ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏",
        "üçó –ü—É—à–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ",
        "üêü –ü–µ—á–µ–Ω —Å—å–æ–º–≥–∞ –∏–ª–∏ –ø–∞–ª–∞–º—É–¥",
        "ü•© –î–æ–º–∞—à–Ω–∏ –∫—é—Ñ—Ç–µ—Ç–∞ –æ—Ç —Ç–µ–ª–µ—à–∫–æ"
    ],
    "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç": [
        "ü•• –í–µ–≥–∞–Ω —Å–∏—Ä–µ–Ω–µ –æ—Ç –∫–∞—à—É",
        "üßÑ –¢–æ—Ñ—É —Å –±–∏–ª–∫–∏ ‚Äì –∏–¥–µ–∞–ª–Ω–æ –∑–∞ —Å–∞–ª–∞—Ç–∞",
        "ü•ë –ê–≤–æ–∫–∞–¥–æ –∑–∞ —Å–æ—Å–æ–≤–µ –∏ –ø–∞—Å—Ç–∏",
        "üå∞ –ë–∞–¥–µ–º–æ–≤–æ, –æ–≤–µ—Å–Ω–æ –∏–ª–∏ —Å–æ–µ–≤–æ –º–ª—è–∫–æ",
        "üåø –ö–æ–∫–æ—Å–æ–≤ –π–æ–≥—É—Ä—Ç"
    ],
    "—Å–ª–∞–¥–∫–∏—à–∏": [
        "üçé –ü—Ä–µ—Å–Ω–∏ –ø–ª–æ–¥–æ–≤–µ",
        "üçå –ë–∞–Ω–∞–Ω–æ–≤–æ —Å–ª–∞–¥–æ–ª–µ–¥",
        "üå∞ –§—É—Ä–º–∏ –∏ —è–¥–∫–∏",
        "üçØ –ú–µ–¥ —Å –æ—Ä–µ—Ö–∏",
        "üçì –î–æ–º–∞—à–µ–Ω –ø–ª–æ–¥–æ–≤ —Å–∞–ª–∞—Ç–∏"
    ],
    "–Ω–∞–ø–∏—Ç–∫–∏": [
        "üíß –í–æ–¥–∞ —Å –ª–∏–º–æ–Ω –∏ –º–µ–Ω—Ç–∞",
        "üçµ –ó–µ–ª–µ–Ω —á–∞–π",
        "ü•§ –î–æ–º–∞—à–µ–Ω –ª–∏–º–æ–Ω–∞–¥–∞",
        "üçé –ü—Ä–µ—Å–Ω–∏ –ø–ª–æ–¥–æ–≤–∏ —Å–æ–∫–æ–≤–µ",
        "üåø –ë–∏–ª–æ—á–µ–Ω —á–∞–π"
    ]
}

def extract_text_from_image(image_data):
    """–ò–∑–≤–ª–∏—á–∞ —Ç–µ–∫—Å—Ç –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Tesseract OCR"""
    try:
        # –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ
        image = Image.open(io.BytesIO(image_data))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –∫—ä–º RGB –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –±—ä–ª–≥–∞—Ä—Å–∫–∏ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏ –µ–∑–∏–∫
        text = pytesseract.image_to_string(image, lang='bul+eng')
        
        return text.strip()
        
    except Exception as e:
        return f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞: {str(e)}"

def analyze_text(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞ –≤—Ä–µ–¥–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏"""
    text_lower = text.lower()
    
    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ E-–Ω–æ–º–µ—Ä–∞
    found_e_numbers = []
    for e_num, description in harmful_e_numbers.items():
        # –¢—ä—Ä—Å–∏ E-–Ω–æ–º–µ—Ä–∞ —Å –∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏: E102, E 102
        pattern = re.compile(r'\b' + re.escape(e_num) + r'\b', re.IGNORECASE)
        if pattern.search(text):
            found_e_numbers.append({
                'code': e_num,
                'description': description
            })
    
    # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
    found_keywords = []
    for keyword, description in harmful_keywords.items():
        if keyword.lower() in text_lower:
            found_keywords.append({
                'keyword': keyword,
                'description': description
            })
    
    # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_category = None
    for keyword, category in food_categories.items():
        if keyword in text_lower:
            product_category = category
            break
    
    return found_e_numbers, found_keywords, product_category

def generate_report(ocr_text, e_numbers, keywords, category, alternatives):
    """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç—á–µ—Ç"""
    report_lines = []
    report_lines.append("üìÑ OCR –ê–ù–ê–õ–ò–ó –ù–ê –•–†–ê–ù–ò–¢–ï–õ–ï–ù –ï–¢–ò–ö–ï–¢")
    report_lines.append("=" * 50)
    
    report_lines.append("\nüìñ –†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:")
    report_lines.append(ocr_text if ocr_text else "–ù–µ –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç")
    report_lines.append("\n" + "=" * 50)
    
    if e_numbers:
        report_lines.append("\nüö® –í–†–ï–î–ù–ò E-–ù–û–ú–ï–†–ê:")
        for item in e_numbers:
            report_lines.append(f"‚Ä¢ {item['code']}: {item['description']}")
    else:
        report_lines.append("\n‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞")
    
    if keywords:
        report_lines.append("\n‚ö†Ô∏è –ó–ê–°–ï–ß–ï–ù–ò –°–™–°–¢–ê–í–ö–ò:")
        for item in keywords:
            report_lines.append(f"‚Ä¢ {item['keyword']}: {item['description']}")
    else:
        report_lines.append("\n‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –æ–ø–∞—Å–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏")
    
    if category:
        report_lines.append(f"\nüè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–Ø –ù–ê –ü–†–û–î–£–ö–¢–ê: {category}")
    
    if alternatives:
        report_lines.append("\nüçΩ –ü–†–ï–ü–û–†–™–ß–ê–ù–ò –ê–õ–¢–ï–†–ù–ê–¢–ò–í–ò:")
        for alt in alternatives:
            report_lines.append(f"‚Ä¢ {alt}")
    
    return "\n".join(report_lines)

@app.route('/api/scan', methods=['POST'])
def scan_image():
    """–û—Å–Ω–æ–≤–µ–Ω endpoint –∑–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–ù—è–º–∞ –∫–∞—á–µ–Ω —Ñ–∞–π–ª'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤–∏—è —Ç–∏–ø
        if not file.content_type.startswith('image/'):
            return jsonify({'error': '–§–∞–π–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG, PNG)'}), 400
        
        # –ü—Ä–æ—á–∏—Ç–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ
        image_data = file.read()
        
        # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
        ocr_text = extract_text_from_image(image_data)
        
        if ocr_text.startswith("–ì—Ä–µ—à–∫–∞"):
            return jsonify({'error': ocr_text}), 500
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
        e_numbers, keywords, category = analyze_text(ocr_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
        alternatives = []
        if (e_numbers or keywords) and category:
            alternatives = category_alternatives.get(category, [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
        report = generate_report(ocr_text, e_numbers, keywords, category, alternatives)
        
        result = {
            'success': True,
            'ocr_text': ocr_text,
            'harmful_e_numbers': e_numbers,
            'harmful_keywords': keywords,
            'product_category': category,
            'alternatives': alternatives,
            'report': report
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {str(e)}'}), 500

@app.route('/api/analyze-text', methods=['POST'])
def analyze_text_endpoint():
    """Endpoint –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç –±–µ–∑ OCR"""
    try:
        data = request.get_json()
        if not data or 'text' not in data:
            return jsonify({'error': '–ù—è–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω —Ç–µ–∫—Å—Ç'}), 400
        
        text = data['text']
        if not text.strip():
            return jsonify({'error': '–¢–µ–∫—Å—Ç—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω'}), 400
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç–∞
        e_numbers, keywords, category = analyze_text(text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏
        alternatives = []
        if (e_numbers or keywords) and category:
            alternatives = category_alternatives.get(category, [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
        report = generate_report(text, e_numbers, keywords, category, alternatives)
        
        result = {
            'success': True,
            'harmful_e_numbers': e_numbers,
            'harmful_keywords': keywords,
            'product_category': category,
            'alternatives': alternatives,
            'report': report
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'OK',
        'message': 'OCR API —Ä–∞–±–æ—Ç–∏ —É—Å–ø–µ—à–Ω–æ',
        'version': '1.0.0'
    })

@app.route('/')
def home():
    """–ù–∞—á–∞–ª–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'OCR API –∑–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –µ—Ç–∏–∫–µ—Ç–∏',
        'endpoints': {
            'POST /api/scan': '–°–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'POST /api/analyze-text': '–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç–µ–∫—Å—Ç',
            'GET /api/health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ'
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
